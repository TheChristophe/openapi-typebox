import * as prettier from 'prettier';
import { ESLint } from 'eslint';
import fs from 'node:fs';

const eslint = new ESLint({
  fix: true,
});

const prettierConfigPath = await prettier.resolveConfigFile();
const prettierConfig = (prettierConfigPath &&
  (await prettier.resolveConfig(prettierConfigPath))) ?? {
  tabWidth: 2,
  singleQuote: true,
  printWidth: 100,
};

/**
 * Use this function for programmatic usage of schema2typebox. The options are
 * typed and commented.
 *
 * TODO: Do one big sweep at the end instead of each file individually? Prettier & ESLint might run faster that way
 *
 * @returns The generated code as string
 *
 * @throws Error
 **/
const writeSanitizedFile = async (filename: string, input: string) => {
  fs.writeFileSync(
    filename,
    `/**
 * This file is autogenerated. Changes will be lost.
 */
 
 ${input}`,
  );

  const lintedOutput = await eslint.lintFiles(filename);
  const lintedFile = lintedOutput[0].output;
  if (!lintedFile) {
    console.error('Error while linting file');
    console.warn(lintedOutput[0]);
    process.exit(1);
  }

  const formattedResult = await prettier.format(lintedFile, {
    parser: 'typescript',
    ...prettierConfig,
  });

  fs.writeFileSync(filename, formattedResult);

  console.log('Generated', filename);
};

export default writeSanitizedFile;
